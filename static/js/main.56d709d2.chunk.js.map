{"version":3,"sources":["common/Button/Button.module.scss","common/Input/Input.module.scss","common/CheckBox/CheckBox.module.scss","common/Button/Button.tsx","common/CheckBox/CheckBox.tsx","common/Input/Input.tsx","components/ToDoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Button","props","buttonClasses","classes","button","btnActive","active","btnType","red","green","className","disabled","onClick","btnName","CheckBox","wrapper","type","checkbox","checked","onChange","e","currentTarget","checkbox__label","label","Input","inputErrorStyle","error","input__elem","input","placeholder","placeHolder","value","onKeyPress","key","addData","ToDoList","useState","newTaskText","setTaskText","setError","addTask","trim","id","tasks","map","task","isDone","title","changeStatus","deleteTask","deleteTodoList","changeFilter","allTasks","length","filter","i","App","todoListId1","v1","todoListId2","todoLists","setTodoLists","setTasks","taskId","todoListId","t","newFilterValue","todoList","find","tl","newText","newTask","tasksForToDoList","newTodoLists","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.56d709d2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__sl2HU\",\"active\":\"Button_active__2uics\",\"green\":\"Button_green__3CBs_\",\"red\":\"Button_red__1IVkR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Input_input__3X7xQ\",\"input__elem\":\"Input_input__elem__1RuoY\",\"error\":\"Input_error__3TqqD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"CheckBox_wrapper__2mKWb\",\"checkbox__label\":\"CheckBox_checkbox__label__3xeJ-\",\"checkbox\":\"CheckBox_checkbox__2DcPn\"};","import React from \"react\";\r\nimport classes from \"./Button.module.scss\";\r\n\r\ntype PropsType = {\r\n    onClick: () => void\r\n    btnName: string\r\n    disabled: boolean\r\n    btnType?: \"green\" | \"red\"\r\n    btnActive?: boolean\r\n}\r\n\r\nexport function Button(props: PropsType) {\r\n\r\n    let buttonClasses = classes.button\r\n    if (props.btnActive) {\r\n        buttonClasses = `${buttonClasses} ${classes.active}`;\r\n    }\r\n\r\n    switch (props.btnType) {\r\n        case \"red\":\r\n            buttonClasses = `${buttonClasses} ${classes.red}`;\r\n            break;\r\n        case \"green\":\r\n            buttonClasses = `${buttonClasses} ${classes.green}`;\r\n            break;\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <button className={buttonClasses}\r\n                    disabled={props.disabled}\r\n                    onClick={props.onClick}>\r\n                {props.btnName}\r\n            </button>\r\n        </>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport classes from \"./CheckBox.module.scss\";\r\n\r\ntype PropsType = {\r\n    onClick: (value: boolean) => void\r\n    disabled?: boolean\r\n    checked: boolean\r\n    label: string\r\n}\r\n\r\nexport function CheckBox(props: PropsType) {\r\n    return (\r\n        <label className={classes.wrapper}>\r\n            <input type='checkbox'\r\n                   className={classes.checkbox}\r\n                   checked={props.checked}\r\n                   onChange={e => props.onClick(e.currentTarget.checked)}\r\n                   disabled={props.disabled}/>\r\n                   <span className={classes.checkbox__label}>{props.label}</span>\r\n        </label>\r\n    )\r\n}\r\n\r\n","import React, {useState} from \"react\";\r\nimport classes from \"./Input.module.scss\";\r\nimport {KeyboardEvent} from \"react\";\r\n\r\ntype PropsType = {\r\n    onChange: (text: string) => void\r\n    disabled?: boolean\r\n    value: string\r\n    addData?: () => void\r\n    error?: boolean\r\n    placeHolder?: string\r\n}\r\n\r\nexport function Input(props: PropsType) {\r\n\r\n    const onPressEnter = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            props.addData && props.addData()\r\n        }\r\n    }\r\n\r\n    const inputErrorStyle = props.error ? `${classes.input__elem} ${classes.error}` : classes.input__elem\r\n\r\n    return (\r\n        <>\r\n            <div className={classes.input}>\r\n                <input type=\"text\"\r\n                       placeholder={props.placeHolder}\r\n                       className={inputErrorStyle}\r\n                       onChange={e => props.onChange(e.currentTarget.value)}\r\n                       onKeyPress={onPressEnter}\r\n                       value={props.value}\r\n                       disabled={props.disabled}/>\r\n                {/*<div className={props.error ? classes.input__error : \"\"}>{props.error}</div>*/}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React, {useState} from \"react\";\r\nimport {FilterValuesType, TaskType} from \"../App\";\r\nimport {Button} from \"../common/Button/Button\";\r\nimport {CheckBox} from \"../common/CheckBox/CheckBox\";\r\nimport {Input} from \"../common/Input/Input\";\r\n\r\ntype ToDoListProps = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n    allTasks: Array<TaskType>\r\n    tasks: Array<TaskType>\r\n    deleteTask: (taskId: string, todoListId: string) => void\r\n    addTask: (newText: string, todoListId: string) => void\r\n    changeFilter: (newFilterValue: FilterValuesType, todoListId: string) => void\r\n    changeStatus: (taskId: string, isDone: boolean, todoListId: string) => void\r\n    deleteTodoList: () => void\r\n}\r\n\r\n\r\nexport function ToDoList(props: ToDoListProps) {\r\n\r\n    let [newTaskText, setTaskText] = useState('');\r\n    let [error, setError] = useState<string | null>(null);\r\n\r\n    function onTaskNameChanged(value: string): void {\r\n        setTaskText(value);\r\n        setError(null);\r\n    }\r\n\r\n    function addTask(): void {\r\n        if (newTaskText.trim()) {\r\n            props.addTask(newTaskText.trim(), props.id);\r\n            setTaskText('');\r\n        }\r\n        setError('Title is required!');\r\n    }\r\n\r\n\r\n    function onAllClickHandler() {\r\n        props.changeFilter('all', props.id)\r\n    }\r\n    function onActiveClickHandler() {\r\n        props.changeFilter('active', props.id)\r\n    }\r\n    function onCompletedClickHandler() {\r\n        props.changeFilter('completed', props.id)\r\n    }\r\n\r\n    const tasks = props.tasks.map(task => {\r\n        function changeCheckBox(value: boolean): void {\r\n            props.changeStatus(task.id, value, props.id);\r\n        }\r\n\r\n        function deleteTask(): void {\r\n            props.deleteTask(task.id, props.id);\r\n        }\r\n\r\n        return (\r\n            <li key={task.id} className={task.isDone ? 'task-default isDone' : 'task-default'}>\r\n                <CheckBox label={task.title}\r\n                          checked={task.isDone}\r\n                          disabled={false}\r\n                          onClick={changeCheckBox}/>\r\n                <Button disabled={false}\r\n                        btnName={\"x\"}\r\n                        onClick={deleteTask}/>\r\n            </li>\r\n        )\r\n    })\r\n    return (\r\n        <div className='todolist'>\r\n            <h3>{props.title} <Button onClick={props.deleteTodoList} disabled={false} btnName={\"x\"}/></h3>\r\n\r\n            <div className='header'>\r\n                <div>\r\n                    <Input onChange={onTaskNameChanged}\r\n                           value={newTaskText}\r\n                           addData={addTask}\r\n                           error={error ? true : false}/>\r\n                    <Button onClick={addTask}\r\n                            btnName={\"+\"}\r\n                            btnType={\"green\"}\r\n                            disabled={!newTaskText}/>\r\n                    {error && <div className=\"error-message\">{error}</div>}\r\n                </div>\r\n                <div>\r\n                    <Button onClick={onAllClickHandler}\r\n                            btnName={\"All\"}\r\n                            disabled={props.allTasks.length === 0}\r\n                            btnActive={props.filter === \"all\"}/>\r\n                    <Button onClick={onActiveClickHandler}\r\n                            btnName={\"Active\"}\r\n                            disabled={props.allTasks.filter(i => !i.isDone).length === 0}\r\n                            btnActive={props.filter === \"active\"}/>\r\n                    <Button onClick={onCompletedClickHandler}\r\n                            btnName={\"Completed\"}\r\n                            disabled={props.allTasks.filter(i => i.isDone).length === 0}\r\n                            btnActive={props.filter === \"completed\"}/>\r\n                </div>\r\n            </div>\r\n\r\n            <ul className=\"tasksList\">\r\n                {tasks}\r\n            </ul>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {ToDoList} from \"./components/ToDoList\";\r\nimport {v1} from \"uuid\";\r\n\r\nexport type TaskType = {\r\n    id: string,\r\n    title: string,\r\n    isDone: boolean,\r\n}\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\n\r\ntype TodoListType = {\r\n    title: string\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\n\r\ntype TasksListType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction App() {\r\n\r\n    let todoListId1 = v1();\r\n    let todoListId2 = v1();\r\n\r\n    let [todoLists, setTodoLists] = useState<Array<TodoListType>>([\r\n        {id: todoListId1, title: 'what to learn', filter: \"completed\"},\r\n        {id: todoListId2, title: 'what to buy', filter: \"active\"}\r\n    ])\r\n\r\n    let [tasks, setTasks] = useState<TasksListType>({\r\n            [todoListId1]: [\r\n                {id: v1(), title: 'Javascript', isDone: false,},\r\n                {id: v1(), title: 'HTML', isDone: true,},\r\n                {id: v1(), title: 'CSS', isDone: false,},\r\n                {id: v1(), title: 'React', isDone: false,},\r\n                {id: v1(), title: 'Redux', isDone: false,},\r\n            ],\r\n            [todoListId2]: [\r\n                {id: v1(), title: 'Картоха', isDone: false,},\r\n                {id: v1(), title: 'Запорожец', isDone: true,},\r\n            ]\r\n        }\r\n    );\r\n\r\n\r\n    function deleteTask(taskId: string, todoListId: string): void {\r\n        tasks[todoListId] = tasks[todoListId].filter(t => t.id !== taskId)\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function changeFilter(newFilterValue: FilterValuesType, todoListId: string) {\r\n        let todoList = todoLists.find(tl => tl.id === todoListId);\r\n        if (todoList) {\r\n            todoList.filter = newFilterValue;\r\n        }\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function addTask(newText: string, todoListId: string): void {\r\n        let newTask = {id: v1(), title: newText, isDone: false};\r\n        tasks[todoListId] = [...tasks[todoListId], newTask]\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    function changeStatus(taskId: string, isDone: boolean, todoListId: string): void {\r\n        let task = tasks[todoListId].find(t => t.id === taskId);\r\n        if (task) {\r\n            task.isDone = isDone;\r\n            setTasks({...tasks})\r\n        }\r\n    }\r\n\r\n    function deleteTodoList(todoListId: string) {\r\n        let newTodoLists = todoLists.filter(tl => tl.id !== todoListId)\r\n        setTodoLists(newTodoLists)\r\n        delete tasks[todoListId]\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            {todoLists.map(tl => {\r\n                let tasksForToDoList: Array<TaskType>;\r\n                switch (tl.filter) {\r\n                    case \"active\":\r\n                        tasksForToDoList = (tasks[tl.id].filter(i => !i.isDone));\r\n                        break;\r\n                    case \"completed\":\r\n                        tasksForToDoList = (tasks[tl.id].filter(i => i.isDone));\r\n                        break;\r\n                    case \"all\":\r\n                        tasksForToDoList = tasks[tl.id];\r\n                        break;\r\n                }\r\n\r\n\r\n                return (\r\n                    <ToDoList\r\n                        key={tl.id}\r\n                        id={tl.id}\r\n                        title={tl.title}\r\n                        filter={tl.filter}\r\n                        tasks={tasksForToDoList}\r\n                        deleteTask={deleteTask}\r\n                        addTask={addTask}\r\n                        changeFilter={changeFilter}\r\n                        changeStatus={changeStatus}\r\n                        deleteTodoList={()=>deleteTodoList(tl.id)}\r\n                        allTasks={tasks[tl.id]}\r\n                    />)\r\n            })}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}