{"version":3,"sources":["components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","components/ToDoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","newTaskText","setTaskText","error","setError","addItem","trim","TextField","onChange","e","target","value","onKeyPress","key","variant","size","helperText","label","IconButton","color","onClick","disabled","AddCircle","EditableSpan","editMode","setEditMode","title","setTitle","onBlur","changeTitle","autoFocus","onDoubleClick","ToDoList","tasks","map","task","id","className","isDone","Checkbox","checked","changeStatus","currentTarget","todolistId","newTaskTitle","changeTaskTitle","deleteTask","Delete","newTitle","changeTodolistTitle","deleteTodoList","addTask","Button","changeFilter","allTasks","length","filter","i","App","todoListId1","v1","todoListId2","todoLists","setTodoLists","setTasks","taskId","todoListId","t","newFilterValue","todoList","find","tl","newText","newTask","newTodolistTitle","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","style","padding","newTodolistId","spacing","tasksForToDoList","item","Paper","elevation","newTodoLists","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.feaac09a.chunk.js","sourcesContent":["import React, {useState, ChangeEvent} from \"react\";\r\nimport {Button, Input, TextField, IconButton} from \"@material-ui/core\";\r\nimport {AddCircle} from \"@material-ui/icons\";\r\n\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport function AddItemForm(props: AddItemFormPropsType) {\r\n\r\n    let [newTaskText, setTaskText] = useState('');\r\n    let [error, setError] = useState<string | null>(null);\r\n\r\n    function onTaskNameChanged(e: ChangeEvent<HTMLInputElement>): void {\r\n        setTaskText(e.target.value);\r\n        setError(null);\r\n    }\r\n\r\n    function addItem(): void {\r\n        if (newTaskText.trim()) {\r\n            props.addItem(newTaskText.trim());\r\n            setTaskText('');\r\n        }\r\n        setError('Title is required!');\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField onChange={onTaskNameChanged}\r\n                       value={newTaskText}\r\n                       onKeyPress={(e) => {if (e.key === \"Enter\") addItem()}}\r\n                       variant={\"outlined\"}\r\n                       size={\"small\"}\r\n                       error={!!error}\r\n                       helperText={error}\r\n                       label={\"Title\"}\r\n            />\r\n            <IconButton color={\"primary\"} onClick={addItem} disabled={!newTaskText}>\r\n                <AddCircle/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n}\r\n","import React, {ChangeEvent, useState} from \"react\";\r\nimport { TextField } from \"@material-ui/core\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (newTitle: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanPropsType) {\r\n\r\n    let [editMode, setEditMode] = useState<boolean>(false)\r\n    let [title, setTitle] = useState<string>('')\r\n\r\n\r\n    function activateEditMode() {\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n\r\n    function deactivateEditMode() {\r\n        setEditMode(false)\r\n        props.changeTitle(title)\r\n    }\r\n\r\n    function changeTitleHandler(e: ChangeEvent<HTMLInputElement>) {\r\n        setTitle(e.target.value)\r\n    }\r\n\r\n\r\n    return editMode\r\n        ? <TextField value={title} variant={\"outlined\"} size={\"small\"} onChange={changeTitleHandler} onBlur={deactivateEditMode} autoFocus/>\r\n        : <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n}\r\n","import React, {MouseEvent, ChangeEvent} from \"react\";\r\nimport {FilterValuesType, TaskType} from \"../App\";\r\nimport {AddItemForm} from \"./AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan/EditableSpan\";\r\nimport {Checkbox, IconButton, Button} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\n\r\ntype ToDoListProps = {\r\n    todolistId: string\r\n    title: string\r\n    filter: FilterValuesType\r\n    allTasks: Array<TaskType>\r\n    tasks: Array<TaskType>\r\n    deleteTask: (taskId: string, todoListId: string) => void\r\n    addTask: (newText: string, todoListId: string) => void\r\n    changeFilter: (newFilterValue: FilterValuesType, todoListId: string) => void\r\n    changeStatus: (taskId: string, isDone: boolean, todoListId: string) => void\r\n    deleteTodoList: () => void\r\n    changeTaskTitle: (todolistId: string, taskId: string, newTaskTitle: string) => void\r\n    changeTodolistTitle: (todolistId: string, newTodolistTitle: string) => void\r\n}\r\n\r\n\r\nexport function ToDoList(props: ToDoListProps) {\r\n\r\n\r\n    function addTaskHandler(value: string) {\r\n        props.addTask(value, props.todolistId)\r\n    }\r\n\r\n    function changeTodolistTitle(newTitle: string) {\r\n        props.changeTodolistTitle(props.todolistId, newTitle)\r\n    }\r\n\r\n    function onAllClickHandler() {\r\n        props.changeFilter('all', props.todolistId)\r\n    }\r\n\r\n    function onActiveClickHandler() {\r\n        props.changeFilter('active', props.todolistId)\r\n    }\r\n\r\n    function onCompletedClickHandler() {\r\n        props.changeFilter('completed', props.todolistId)\r\n    }\r\n\r\n\r\n    const tasks = props.tasks.map(task => {\r\n        function changeCheckBox(e: ChangeEvent<HTMLInputElement>): void {\r\n            props.changeStatus(task.id, e.currentTarget.checked, props.todolistId);\r\n        }\r\n\r\n        function deleteTask(): void {\r\n            props.deleteTask(task.id, props.todolistId);\r\n        }\r\n\r\n        function changeTaskTitle(newTaskTitle: string) {\r\n            props.changeTaskTitle(props.todolistId, task.id, newTaskTitle)\r\n        }\r\n\r\n        return (\r\n            <div key={task.id} className={task.isDone ? 'task-default isDone' : 'task-default'}>\r\n                <Checkbox checked={task.isDone}\r\n                          color={\"primary\"}\r\n                          onChange={changeCheckBox}/>\r\n                <EditableSpan title={task.title} changeTitle={changeTaskTitle}/>\r\n                <IconButton onClick={deleteTask}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </div>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div className='todolist'>\r\n            <div>\r\n                <EditableSpan title={props.title} changeTitle={changeTodolistTitle}/>\r\n                <IconButton onClick={props.deleteTodoList}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </div>\r\n\r\n            <div className='header'>\r\n                <AddItemForm addItem={addTaskHandler}/>\r\n\r\n                <div>\r\n                    <Button onClick={onAllClickHandler}\r\n                            disabled={props.allTasks.length === 0}\r\n                            color={\"primary\"}\r\n                            variant={props.filter === \"all\" ? \"contained\" : \"outlined\"}>All</Button>\r\n                    <Button onClick={onActiveClickHandler}\r\n                            disabled={props.allTasks.filter(i => !i.isDone).length === 0}\r\n                            color={\"primary\"}\r\n                            variant={props.filter === \"active\" ? \"contained\" : \"outlined\"}>Active</Button>\r\n                    <Button onClick={onCompletedClickHandler}\r\n                            disabled={props.allTasks.filter(i => i.isDone).length === 0}\r\n                            color={\"primary\"}\r\n                            variant={props.filter === \"completed\" ? \"contained\" : \"outlined\"}>Completed</Button>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"tasksList\">\r\n                {tasks}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {ToDoList} from \"./components/ToDoList\";\r\nimport {v1} from \"uuid\";\r\nimport {AddItemForm} from \"./components/AddItemForm/AddItemForm\";\r\nimport {AppBar, IconButton, Typography, Button, Toolbar, Container, Grid, Paper} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\n\r\nexport type TaskType = {\r\n    id: string,\r\n    title: string,\r\n    isDone: boolean,\r\n}\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\n\r\ntype TodoListType = {\r\n    title: string\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\n\r\ntype TasksListType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction App() {\r\n\r\n    let todoListId1 = v1();\r\n    let todoListId2 = v1();\r\n\r\n    let [todoLists, setTodoLists] = useState<Array<TodoListType>>([\r\n        {id: todoListId1, title: 'what to learn', filter: \"completed\"},\r\n        {id: todoListId2, title: 'what to buy', filter: \"active\"}\r\n    ])\r\n\r\n    let [tasks, setTasks] = useState<TasksListType>({\r\n            [todoListId1]: [\r\n                {id: v1(), title: 'Javascript', isDone: false,},\r\n                {id: v1(), title: 'HTML', isDone: true,},\r\n                {id: v1(), title: 'CSS', isDone: false,},\r\n                {id: v1(), title: 'React', isDone: false,},\r\n                {id: v1(), title: 'Redux', isDone: false,},\r\n            ],\r\n            [todoListId2]: [\r\n                {id: v1(), title: 'Картоха', isDone: false,},\r\n                {id: v1(), title: 'Запорожец', isDone: true,},\r\n            ]\r\n        }\r\n    );\r\n\r\n\r\n    function deleteTask(taskId: string, todoListId: string): void {\r\n        tasks[todoListId] = tasks[todoListId].filter(t => t.id !== taskId)\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function changeFilter(newFilterValue: FilterValuesType, todoListId: string) {\r\n        let todoList = todoLists.find(tl => tl.id === todoListId);\r\n        if (todoList) {\r\n            todoList.filter = newFilterValue;\r\n        }\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function addTask(newText: string, todoListId: string): void {\r\n        let newTask = {id: v1(), title: newText, isDone: false};\r\n        tasks[todoListId] = [...tasks[todoListId], newTask]\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    function changeStatus(taskId: string, isDone: boolean, todoListId: string): void {\r\n        let task = tasks[todoListId].find(t => t.id === taskId);\r\n        if (task) {\r\n            task.isDone = isDone;\r\n            setTasks({...tasks})\r\n        }\r\n    }\r\n\r\n    function deleteTodoList(todoListId: string) {\r\n        let newTodoLists = todoLists.filter(tl => tl.id !== todoListId)\r\n        setTodoLists(newTodoLists)\r\n        delete tasks[todoListId]\r\n    }\r\n\r\n\r\n    function addTodolist(newTodolistTitle: string) {\r\n        let newTodolistId = v1();\r\n        setTodoLists([...todoLists, {id: newTodolistId, title: newTodolistTitle, filter: \"all\"}])\r\n        setTasks({...tasks, [newTodolistId]: []})\r\n    }\r\n\r\n    function changeTaskTitle(todolistId: string, taskId: string, newTitle: string) {\r\n        setTasks({\r\n            ...tasks,\r\n            [todolistId]: tasks[todolistId].map(task => task.id === taskId ? {...task, title: newTitle} : task)\r\n        })\r\n    }\r\n\r\n    function changeTodolistTitle(todolistId: string, newTodolistTitle: string) {\r\n        setTodoLists(todoLists.map(tl => tl.id === todolistId ? {...tl, title: newTodolistTitle} : tl))\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {todoLists.map(tl => {\r\n                        let tasksForToDoList: Array<TaskType>;\r\n                        switch (tl.filter) {\r\n                            case \"active\":\r\n                                tasksForToDoList = (tasks[tl.id].filter(i => !i.isDone));\r\n                                break;\r\n                            case \"completed\":\r\n                                tasksForToDoList = (tasks[tl.id].filter(i => i.isDone));\r\n                                break;\r\n                            case \"all\":\r\n                                tasksForToDoList = tasks[tl.id];\r\n                                break;\r\n                        }\r\n\r\n\r\n                        return (\r\n                            <Grid item>\r\n                                <Paper elevation={23} style={{padding: \"10px\"}}>\r\n                                    <ToDoList\r\n                                        key={tl.id}\r\n                                        todolistId={tl.id}\r\n                                        title={tl.title}\r\n                                        filter={tl.filter}\r\n                                        tasks={tasksForToDoList}\r\n                                        deleteTask={deleteTask}\r\n                                        addTask={addTask}\r\n                                        changeFilter={changeFilter}\r\n                                        changeStatus={changeStatus}\r\n                                        deleteTodoList={() => deleteTodoList(tl.id)}\r\n                                        allTasks={tasks[tl.id]}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        )\r\n                    })}\r\n                </Grid>\r\n\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}