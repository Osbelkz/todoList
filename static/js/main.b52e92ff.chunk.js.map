{"version":3,"sources":["serviceWorker.ts","state/todolists-reducer.ts","state/tasks-reducer.ts","state/store.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","components/Task/Task.tsx","components/ToDoList.tsx","AppWithRedux.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TODOLISTS_ACTION_TYPE","TASKS_ACTION_TYPE","initialState","ChangeTodolistFilterAC","todolistId","newFilter","type","CHANGE_TODOLIST_FILTER","id","filter","changeTitleAndStatus","tasks","taskId","proper","propertyName","map","task","rootReducer","combineReducers","state","action","REMOVE_TASK","newTodolist","ADD_TASK","newTask","v1","isDone","title","CHANGE_TASK_STATUS","CHANGE_TASK_TITLE","ADD_TODOLIST","REMOVE_TODOLIST","newState","todolists","todolist","CHANGE_TODOLIST_TITLE","store","createStore","AddItemForm","React","memo","props","useState","newTaskText","setTaskText","error","setError","addItem","trim","TextField","onChange","e","target","value","onKeyPress","key","variant","size","helperText","label","IconButton","color","onClick","disabled","AddCircle","EditableSpan","console","log","editMode","setEditMode","setTitle","onBlur","changeTitle","autoFocus","onDoubleClick","Task","changeStatusHandler","useCallback","changeStatus","currentTarget","checked","deleteTaskHandler","deleteTask","changeTaskTitleHandler","newTaskTitle","changeTaskTitle","className","Checkbox","Delete","ToDoList","tasksObj","useSelector","dispatch","useDispatch","tasksForToDoList","i","addTaskHandler","changeTodolistTitle","newTitle","ChangeTodolistTitleAC","removeTodolistHandler","newStatus","changeTaskStatusAC","removeTaskAC","changeTaskTitleAC","Button","length","AppWithRedux","todoLists","addTodolist","newTodolistTitle","AddTodolistAC","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","style","padding","spacing","tl","item","Paper","elevation","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.b52e92ff.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {v1} from \"uuid\";\r\n\r\nexport enum TODOLISTS_ACTION_TYPE {\r\n    REMOVE_TODOLIST = \"REMOVE-TODOLIST\",\r\n    ADD_TODOLIST = \"ADD-TODOLIST\",\r\n    CHANGE_TODOLIST_TITLE = \"CHANGE-TODOLIST-TITLE\",\r\n    CHANGE_TODOLIST_FILTER = \"CHANGE-TODOLIST-FILTER\"\r\n}\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodoListType = {\r\n    title: string\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type RemoveTodolistActionType = {\r\n    type: TODOLISTS_ACTION_TYPE.REMOVE_TODOLIST\r\n    id: string\r\n}\r\nexport type AddTodolistActionType = {\r\n    type: TODOLISTS_ACTION_TYPE.ADD_TODOLIST\r\n    title: string\r\n    todolistId: string\r\n}\r\nexport type ChangeTodolistTitleActionType = {\r\n    type: TODOLISTS_ACTION_TYPE.CHANGE_TODOLIST_TITLE\r\n    id: string\r\n    title: string\r\n}\r\nexport type ChangeTodolistFilterActionType = {\r\n    type: TODOLISTS_ACTION_TYPE.CHANGE_TODOLIST_FILTER\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\n\r\ntype ActionsTypes = RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ChangeTodolistTitleActionType\r\n    | ChangeTodolistFilterActionType\r\n\r\nconst initialState: Array<TodoListType> = []\r\n\r\nexport const todolistsReducer = (state = initialState, action: ActionsTypes): Array<TodoListType> => {\r\n    switch (action.type) {\r\n        case TODOLISTS_ACTION_TYPE.REMOVE_TODOLIST:\r\n            return state.filter(todolist => todolist.id !== action.id);\r\n        case TODOLISTS_ACTION_TYPE.ADD_TODOLIST:\r\n            return [\r\n                ...state,\r\n                {id: action.todolistId, title: action.title, filter: \"all\"}\r\n            ];\r\n        case TODOLISTS_ACTION_TYPE.CHANGE_TODOLIST_TITLE:\r\n            return state.map(todolist => todolist.id === action.id\r\n                ? {...todolist, title: action.title}\r\n                : todolist);\r\n        case TODOLISTS_ACTION_TYPE.CHANGE_TODOLIST_FILTER:\r\n            return state.map(todolist => todolist.id === action.id\r\n                ? {...todolist, filter: action.filter}\r\n                : todolist);\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const RemoveTodolistAC = (todolistId: string): RemoveTodolistActionType => {\r\n    return {type: TODOLISTS_ACTION_TYPE.REMOVE_TODOLIST, id: todolistId}\r\n}\r\n\r\nexport const AddTodolistAC = (newTodolistTitle: string): AddTodolistActionType => {\r\n    return {type: TODOLISTS_ACTION_TYPE.ADD_TODOLIST, title: newTodolistTitle, todolistId: v1()}\r\n}\r\n\r\nexport const ChangeTodolistTitleAC = (todolistId: string, newTitle: string): ChangeTodolistTitleActionType => {\r\n    return {type: TODOLISTS_ACTION_TYPE.CHANGE_TODOLIST_TITLE, id: todolistId, title: newTitle}\r\n}\r\n\r\nexport const ChangeTodolistFilterAC = (todolistId: string, newFilter: FilterValuesType): ChangeTodolistFilterActionType => {\r\n    return {type: TODOLISTS_ACTION_TYPE.CHANGE_TODOLIST_FILTER, id: todolistId, filter: newFilter}\r\n}\r\n","import {v1} from \"uuid\"\r\nimport {AddTodolistActionType, RemoveTodolistActionType, TODOLISTS_ACTION_TYPE} from \"./todolists-reducer\";\r\n\r\nexport enum TASKS_ACTION_TYPE {\r\n    ADD_TASK =\"ADD_TASK\",\r\n    REMOVE_TASK =\"REMOVE_TASK\",\r\n    CHANGE_TASK_STATUS = \"CHANGE_TASK_STATUS\",\r\n    CHANGE_TASK_TITLE = \"CHANGE_TASK_TITLE\"\r\n}\r\n\r\nexport type TaskType = {\r\n    id: string,\r\n    title: string,\r\n    isDone: boolean,\r\n}\r\n\r\nexport type TasksListType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nexport type RemoveActionType = {\r\n    type: TASKS_ACTION_TYPE.REMOVE_TASK\r\n    taskId: string\r\n    todolistId: string\r\n}\r\nexport type AddTaskActionType = {\r\n    type: TASKS_ACTION_TYPE.ADD_TASK\r\n    todolistId: string\r\n    title: string\r\n}\r\nexport type ChangeTaskStatusActionType = {\r\n    type: TASKS_ACTION_TYPE.CHANGE_TASK_STATUS\r\n    taskId: string\r\n    todolistId: string\r\n    isDone: boolean\r\n}\r\nexport type ChangeTaskTitleActionType = {\r\n    type: TASKS_ACTION_TYPE.CHANGE_TASK_TITLE\r\n    taskId: string\r\n    todolistId: string\r\n    title: string\r\n}\r\n\r\n\r\ntype ActionsTypes = RemoveActionType\r\n    | AddTaskActionType\r\n    | ChangeTaskStatusActionType\r\n    | ChangeTaskTitleActionType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n\r\nconst initialState:TasksListType = {}\r\n\r\nexport const tasksReducer = (state = initialState, action: ActionsTypes): TasksListType => {\r\n    switch (action.type) {\r\n        case TASKS_ACTION_TYPE.REMOVE_TASK:\r\n            let newTodolist = [...state[action.todolistId].filter(task => task.id !== action.taskId)]\r\n            return {...state, [action.todolistId]: newTodolist}\r\n        case TASKS_ACTION_TYPE.ADD_TASK:\r\n            let newTask = {id: v1(), isDone: false, title: action.title}\r\n            return {...state, [action.todolistId]: [newTask, ...state[action.todolistId]]}\r\n        case TASKS_ACTION_TYPE.CHANGE_TASK_STATUS:\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: changeTitleAndStatus(state[action.todolistId], action.taskId, action.isDone)\r\n            }\r\n        case TASKS_ACTION_TYPE.CHANGE_TASK_TITLE:\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: changeTitleAndStatus(state[action.todolistId], action.taskId, action.title)\r\n            }\r\n        case TODOLISTS_ACTION_TYPE.ADD_TODOLIST:\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: []\r\n            }\r\n        case TODOLISTS_ACTION_TYPE.REMOVE_TODOLIST:\r\n            let newState = {...state}\r\n            delete newState[action.id]\r\n            return newState\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n//action creators\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveActionType => {\r\n    return {type: TASKS_ACTION_TYPE.REMOVE_TASK, taskId, todolistId}\r\n}\r\nexport const addTaskAC = (todolistId: string, title: string): AddTaskActionType => {\r\n    return {type: TASKS_ACTION_TYPE.ADD_TASK, todolistId, title}\r\n}\r\nexport const changeTaskStatusAC = (taskId: string, isDone: boolean, todolistId: string,): ChangeTaskStatusActionType => {\r\n    return {type: TASKS_ACTION_TYPE.CHANGE_TASK_STATUS, taskId, todolistId, isDone}\r\n}\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string,): ChangeTaskTitleActionType => {\r\n    return {type: TASKS_ACTION_TYPE.CHANGE_TASK_TITLE, taskId, todolistId, title}\r\n}\r\n\r\n\r\n//additional functions\r\n\r\nconst changeTitleAndStatus = (tasks: Array<TaskType>, taskId: string, proper: string | boolean): Array<TaskType> => {\r\n    let propertyName = typeof proper === \"string\" ? \"title\" : \"isDone\"\r\n    return tasks.map(task => {\r\n        if (task.id !== taskId) {\r\n            return task\r\n        }\r\n        return {...task, [propertyName]: proper}\r\n    })\r\n}\r\n","import {tasksReducer} from './tasks-reducer';\r\nimport {todolistsReducer} from './todolists-reducer';\r\nimport {combineReducers, createStore} from 'redux';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer);\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React, {useState, ChangeEvent, KeyboardEvent} from \"react\";\r\nimport {TextField, IconButton} from \"@material-ui/core\";\r\nimport {AddCircle} from \"@material-ui/icons\";\r\n\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm  = React.memo( function (props: AddItemFormPropsType) {\r\n    let [newTaskText, setTaskText] = useState('');\r\n    let [error, setError] = useState<string | null>(null);\r\n\r\n    function onTaskNameChanged(e: ChangeEvent<HTMLInputElement>): void {\r\n        setTaskText(e.target.value);\r\n        setError(null);\r\n    }\r\n\r\n    function addItem(): void {\r\n        if (newTaskText.trim()) {\r\n            props.addItem(newTaskText.trim());\r\n            setTaskText('');\r\n        }\r\n        setError('Title is required!');\r\n    }\r\n\r\n    const onKeyPressHandler =  (e: KeyboardEvent<HTMLDivElement>) => {\r\n        if (error !== null) setError(null)\r\n        if (e.key === \"Enter\") addItem()\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField onChange={onTaskNameChanged}\r\n                       value={newTaskText}\r\n                       onKeyPress={onKeyPressHandler}\r\n                       variant={\"outlined\"}\r\n                       size={\"small\"}\r\n                       error={!!error}\r\n                       helperText={error}\r\n                       label={\"Title\"}\r\n            />\r\n            <IconButton color={\"primary\"} onClick={addItem} disabled={!newTaskText}>\r\n                <AddCircle/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})\r\n","import React, {ChangeEvent, useState} from \"react\";\r\nimport { TextField } from \"@material-ui/core\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (newTitle: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"editable span\")\r\n    let [editMode, setEditMode] = useState<boolean>(false)\r\n    let [title, setTitle] = useState<string>('')\r\n\r\n\r\n    function activateEditMode() {\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n\r\n    function deactivateEditMode() {\r\n        setEditMode(false)\r\n        props.changeTitle(title)\r\n    }\r\n\r\n    function changeTitleHandler(e: ChangeEvent<HTMLInputElement>) {\r\n        setTitle(e.target.value)\r\n    }\r\n\r\n\r\n    return editMode\r\n        ? <TextField value={title} variant={\"outlined\"} size={\"small\"} onChange={changeTitleHandler} onBlur={deactivateEditMode} autoFocus/>\r\n        : <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n})\r\n","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport { TaskType } from \"../../state/tasks-reducer\";\r\n\r\ntype PropsType = {\r\n    task: TaskType\r\n    deleteTask: (taskId: string) => void\r\n    changeTaskTitle: (taskId: string, newTaskTitle: string) => void\r\n    changeStatus: (taskId: string, newStatus: boolean) => void\r\n}\r\n\r\nexport const Task = React.memo(function (props: PropsType){\r\n\r\n    const changeStatusHandler = useCallback((e: ChangeEvent<HTMLInputElement>): void => {\r\n        props.changeStatus(props.task.id, e.currentTarget.checked);\r\n    }, [props])\r\n\r\n    const deleteTaskHandler = useCallback(() => {\r\n        props.deleteTask(props.task.id);\r\n    }, [props])\r\n\r\n    const changeTaskTitleHandler = useCallback((newTaskTitle: string) => {\r\n        props.changeTaskTitle(props.task.id, newTaskTitle)\r\n    }, [props])\r\n\r\n    return (\r\n        <div key={props.task.id} className={props.task.isDone ? 'task-default isDone' : 'task-default'}>\r\n            <Checkbox checked={props.task.isDone}\r\n                      color={\"primary\"}\r\n                      onChange={changeStatusHandler}/>\r\n            <EditableSpan title={props.task.title} changeTitle={changeTaskTitleHandler}/>\r\n            <IconButton onClick={deleteTaskHandler}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})\r\n","import React, {useCallback} from \"react\";\r\nimport {AddItemForm} from \"./AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan/EditableSpan\";\r\nimport {IconButton, Button} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../state/store\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC, TaskType} from \"../state/tasks-reducer\";\r\nimport {ChangeTodolistFilterAC, ChangeTodolistTitleAC, RemoveTodolistAC, TodoListType} from \"../state/todolists-reducer\";\r\nimport {Task} from \"./Task/Task\";\r\n\r\ntype ToDoListPropsType = {\r\n    todolist: TodoListType\r\n}\r\n\r\nexport const ToDoList = React.memo((props: ToDoListPropsType) => {\r\n    console.log(\"todolist\")\r\n    const tasksObj = useSelector<AppRootStateType, Array<TaskType>>(state => state.tasks[props.todolist.id]);\r\n    const dispatch = useDispatch();\r\n\r\n    let tasksForToDoList: Array<TaskType> = tasksObj;\r\n    switch (props.todolist.filter) {\r\n        case \"active\":\r\n            tasksForToDoList = tasksForToDoList.filter(i => !i.isDone);\r\n            break;\r\n        case \"completed\":\r\n            tasksForToDoList = tasksForToDoList.filter(i => i.isDone);\r\n            break;\r\n        case \"all\":\r\n            break;\r\n    }\r\n\r\n    const addTaskHandler = useCallback((value: string): void => {\r\n        dispatch(addTaskAC(props.todolist.id, value))\r\n    }, [dispatch, props.todolist.id])\r\n\r\n    const changeTodolistTitle = useCallback((newTitle: string): void => {\r\n        dispatch(ChangeTodolistTitleAC(props.todolist.id, newTitle))\r\n    }, [dispatch, props.todolist.id])\r\n\r\n    const removeTodolistHandler = useCallback((): void => {\r\n        dispatch(RemoveTodolistAC(props.todolist.id))\r\n    }, [dispatch, props.todolist.id])\r\n\r\n    const changeStatus = useCallback((taskId: string, newStatus: boolean): void => {\r\n        dispatch(changeTaskStatusAC(taskId, newStatus, props.todolist.id ));\r\n    }, [dispatch, props.todolist.id])\r\n\r\n    const deleteTask = useCallback((taskId: string) => {\r\n        dispatch(removeTaskAC(taskId, props.todolist.id));\r\n    }, [dispatch, props.todolist.id])\r\n\r\n    const changeTaskTitle = useCallback((taskId:string, newTaskTitle: string): void => {\r\n        dispatch(changeTaskTitleAC(taskId, newTaskTitle, props.todolist.id))\r\n    }, [dispatch, props.todolist.id])\r\n\r\n\r\n    const onAllClickHandler = () => {\r\n        dispatch(ChangeTodolistFilterAC(props.todolist.id, 'all'))\r\n    }\r\n\r\n    const onActiveClickHandler = () => {\r\n        dispatch(ChangeTodolistFilterAC(props.todolist.id, 'active'))\r\n    }\r\n\r\n    const onCompletedClickHandler = () => {\r\n        dispatch(ChangeTodolistFilterAC(props.todolist.id, 'completed'))\r\n    }\r\n\r\n\r\n    const tasks = tasksForToDoList.map(task => <Task\r\n        key={task.id}\r\n        task={task}\r\n        changeStatus={changeStatus}\r\n        changeTaskTitle={changeTaskTitle}\r\n        deleteTask={deleteTask}\r\n    />)\r\n\r\n    return (\r\n        <div className='todolist'>\r\n            <div>\r\n                <EditableSpan title={props.todolist.title} changeTitle={changeTodolistTitle}/>\r\n                <IconButton onClick={removeTodolistHandler}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </div>\r\n            <div className='header'>\r\n                <AddItemForm addItem={addTaskHandler}/>\r\n                <div>\r\n                    <Button onClick={onAllClickHandler}\r\n                            disabled={tasksObj.length === 0}\r\n                            color={\"primary\"}\r\n                            variant={props.todolist.filter === \"all\" ? \"contained\" : \"outlined\"}>All</Button>\r\n                    <Button onClick={onActiveClickHandler}\r\n                            disabled={tasksObj.filter(i => !i.isDone).length === 0}\r\n                            color={\"primary\"}\r\n                            variant={props.todolist.filter === \"active\" ? \"contained\" : \"outlined\"}>Active</Button>\r\n                    <Button onClick={onCompletedClickHandler}\r\n                            disabled={tasksObj.filter(i => i.isDone).length === 0}\r\n                            color={\"primary\"}\r\n                            variant={props.todolist.filter === \"completed\" ? \"contained\" : \"outlined\"}>Completed</Button>\r\n                </div>\r\n            </div>\r\n            <div className=\"tasksList\">\r\n                {tasks}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n","import React, {useCallback} from 'react';\r\nimport './App.css';\r\nimport {ToDoList} from \"./components/ToDoList\";\r\nimport {AddItemForm} from \"./components/AddItemForm/AddItemForm\";\r\nimport {AppBar, IconButton, Typography, Button, Toolbar, Container, Grid, Paper} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {AddTodolistAC, TodoListType,} from \"./state/todolists-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\n\r\n\r\nfunction AppWithRedux() {\r\n\r\n    const todoLists = useSelector<AppRootStateType, Array<TodoListType>>(state => state.todolists)\r\n    const dispatch = useDispatch();\r\n\r\n    const addTodolist = useCallback((newTodolistTitle: string) => {\r\n        dispatch(AddTodolistAC(newTodolistTitle))\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {todoLists.map(tl => {\r\n\r\n                        return (\r\n                            <Grid item key={tl.id}>\r\n                                <Paper elevation={23} style={{padding: \"10px\"}}>\r\n                                    <ToDoList\r\n                                        todolist={tl}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        )\r\n                    })}\r\n                </Grid>\r\n\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AppWithRedux;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\nimport AppWithRedux from './AppWithRedux';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux />\r\n    </Provider>,\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}