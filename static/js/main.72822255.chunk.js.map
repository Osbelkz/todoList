{"version":3,"sources":["serviceWorker.ts","api/todolists-a-p-i.ts","utils/error-utils.ts","features/TodolistsList/tasks-reducer.ts","features/Auth/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","app/store.ts","components/ErrorSnackbar/ErrorSnackbar.tsx","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","utils/redux-utils.ts","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/Auth/selectors.ts","features/TodolistsList/TodolistsList.tsx","features/TodolistsList/index.tsx","features/Auth/Login.tsx","features/Auth/index.tsx","app/selectors.ts","app/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","RequestStatusCodes","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","todolistId","delete","id","put","tasksAPI","taskId","model","authAPI","data","handleServerAppError","dispatch","showError","setAppErrorAC","error","messages","length","setAppStatusAC","status","handleServerNetworkError","message","loginTC","createAsyncThunk","params","thunkAPI","a","res","resultCode","rejectWithValue","errors","fieldsErrors","undefined","logoutTC","asyncActions","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","value","extraReducers","builder","addCase","fulfilled","authReducer","reducer","actions","authMeTC","param","init","appReducer","fetchTodolists","todolists","removeTodolist","changeTodolistEntityStatus","addTodolist","todolist","item","changeTodolistTitle","success","newTitle","changeTodolistFilter","index","findIndex","tl","filter","newFilter","entityStatus","map","splice","unshift","todolistsReducer","fetchTasks","tasks","items","removeTask","changeTaskEntityStatusAC","addTask","updateTask","getState","domain","task","find","t","apiModel","deadline","description","priority","startDate","asyncTodolistsActions","forEach","todoListId","tasksReducer","rootReducer","combineReducers","app","auth","store","configureStore","middleware","getDefaultMiddleware","prepend","thunk","Alert","props","elevation","variant","ErrorSnackbar","useDispatch","useSelector","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","AddItemForm","React","memo","useState","newTaskText","setTaskText","setError","addItem","trim","TextField","onChange","e","target","onKeyPress","key","size","helperText","label","disabled","IconButton","color","onClick","style","marginLeft","AddCircle","EditableSpan","console","log","editMode","setEditMode","setTitle","onBlur","autoFocus","onDoubleClick","useAppDispatch","useActions","useMemo","bindActionCreators","Task","tasksActions","onClickHandler","useCallback","onChangeHandler","newIsDoneValue","currentTarget","checked","Completed","New","onTitleChangeHandler","newValue","className","position","Checkbox","top","right","Delete","fontSize","Todolist","todolistsActions","useEffect","addTaskCallback","helper","resultAction","rejected","changeTodolistTitleHandler","onFilterButtonClickHandler","tasksForTodolist","renderFilterButton","buttonFilter","text","Button","Paper","padding","paddingTop","selectIsLoggedIn","TodolistsList","addTodolistCallback","Grid","container","spacing","flexWrap","overflowX","allTodolistTasks","width","to","todolistAsyncActions","todolistsSlice","tasksAsyncActions","tasksSlice","Login","formik","useFormik","initialValues","rememberMe","password","email","validate","values","test","onSubmit","formikHelpers","authActions","setFieldError","field","justify","xs","handleSubmit","FormControl","FormLabel","href","FormGroup","margin","getFieldProps","type","FormControlLabel","control","selectStatus","selectInitApp","App","authSelectors","initApp","AppBar","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","component","textAlign","CircularProgress","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.72822255.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\r\n    withCredentials: true,\r\n    headers: {\r\n        \"api-key\": \"2dece0c4-7aed-430e-aeba-9f10430f969a\"\r\n    }\r\n})\r\n\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<Array<TodolistType>>(\"todo-lists\")\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<CommonResponseType<{ item: TodolistType }>>(\"todo-lists\", {title})\r\n    },\r\n    deleteTodolist(todolistId: string) {\r\n        return instance.delete<CommonResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<CommonResponseType>(`todo-lists/${id}`, {title: title});\r\n    }\r\n}\r\n\r\nexport const tasksAPI = {\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<CommonResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<CommonResponseType>(`/todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<CommonResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<CommonResponseType<AuthMeType>>(\"auth/me\")\r\n    },\r\n    login(data: LoginParamsType) {\r\n        return instance.post<CommonResponseType<{userId: number}>>(\"auth/login\", data)\r\n    },\r\n    logout() {\r\n        return instance.delete<CommonResponseType>(\"auth/login\")\r\n    }\r\n\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport type AuthMeType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\n\r\nexport type FieldErrorType = { field: string, error: string };\r\nexport type CommonResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors?: Array<FieldErrorType>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport enum RequestStatusCodes {\r\n    success= 0,\r\n    error=1,\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import {Dispatch} from \"redux\";\r\nimport {setAppErrorAC, setAppStatusAC} from \"../app/app-reducer\";\r\nimport {CommonResponseType} from \"../api/todolists-a-p-i\";\r\n\r\nexport const handleServerAppError = <D>(data: CommonResponseType<D>,\r\n                                        dispatch: Dispatch,\r\n                                        showError = true\r\n) => {\r\n\r\n    if (showError) {\r\n        dispatch(setAppErrorAC({\r\n            error: data.messages.length\r\n                ? data.messages[0]\r\n                : 'Some error occurred'\r\n        }))\r\n    }\r\n\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string },\r\n                                         dispatch: Dispatch,\r\n                                         showError = true\r\n) => {\r\n    if (showError) {\r\n        dispatch(setAppErrorAC({\r\n            error: error.message\r\n                ? error.message\r\n                : 'Some error occurred'\r\n        }))\r\n    }\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n","import {RequestStatusType, setAppErrorAC, setAppStatusAC,} from \"../../app/app-reducer\";\r\nimport {\r\n    TaskPriorities,\r\n    tasksAPI,\r\n    TaskStatuses,\r\n    TaskType,\r\n    UpdateTaskModelType\r\n} from \"../../api/todolists-a-p-i\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {handleServerAppError} from \"../../utils/error-utils\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {asyncActions as asyncTodolistsActions} from \"./todolists-reducer\";\r\nimport {AxiosError} from \"axios\";\r\nimport { ThunkErrorType } from \"../../utils/redux-help-types\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport enum RequestStatusCodes {\r\n    success = 0,\r\n    error = 1,\r\n}\r\n\r\nexport const fetchTasks = createAsyncThunk(\"tasks/fetchTasks\", async (todolistId: string, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: \"loading\"}))\r\n    const res = await tasksAPI.getTasks(todolistId)\r\n    thunkAPI.dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n    return {todolistId, tasks: res.data.items}\r\n})\r\nexport const removeTask = createAsyncThunk(\"tasks/removeTask\", async (params: { todolistId: string, taskId: string }, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: \"loading\"}))\r\n    thunkAPI.dispatch(changeTaskEntityStatusAC({\r\n        todolistId: params.todolistId,\r\n        taskId: params.taskId,\r\n        status: \"loading\"\r\n    }))\r\n    try {\r\n        const res = await tasksAPI.deleteTask(params.todolistId, params.taskId)\r\n        thunkAPI.dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n        return {taskId: params.taskId, todolistId: params.todolistId}\r\n    } catch (e) {\r\n        thunkAPI.dispatch(setAppStatusAC({status: \"failed\"}))\r\n        return thunkAPI.rejectWithValue(setAppErrorAC(e.message))\r\n    }\r\n})\r\nexport const addTask = createAsyncThunk<TaskType, { todolistId: string, title: string }, ThunkErrorType\r\n    >(\"tasks/addTask\", async (params, {dispatch, rejectWithValue}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await tasksAPI.createTask(params.todolistId, params.title)\r\n        if (res.data.resultCode === RequestStatusCodes.success) {\r\n            return res.data.data.item\r\n        } else {\r\n            handleServerAppError(res.data, dispatch, false)\r\n            return rejectWithValue({errors: res.data.messages, fieldsErrors: res.data.fieldsErrors})\r\n        }\r\n    } catch (e) {\r\n        const error: AxiosError = e\r\n        handleServerAppError(e, dispatch, false)\r\n        return rejectWithValue({errors: [error.message], fieldsErrors: undefined})\r\n    }\r\n})\r\nexport const updateTask = createAsyncThunk(\"tasks/updateTask\", async (params: { taskId: string, domain: UpdateDomainTaskModelType, todolistId: string }, {dispatch, getState, rejectWithValue}) => {\r\n    const state = getState() as AppRootStateType\r\n    const {taskId, todolistId, domain} = params\r\n    const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n    if (!task) {\r\n        return rejectWithValue(null)\r\n    }\r\n\r\n    const apiModel: UpdateTaskModelType = {\r\n        deadline: task.deadline,\r\n        description: task.description,\r\n        priority: task.priority,\r\n        startDate: task.startDate,\r\n        title: task.title,\r\n        status: task.status,\r\n        ...domain\r\n    }\r\n\r\n    dispatch(setAppStatusAC({status: \"loading\"}))\r\n    dispatch(changeTaskEntityStatusAC({todolistId, taskId, status: \"loading\"}))\r\n    const res = await tasksAPI.updateTask(todolistId, taskId, apiModel)\r\n    try {\r\n        if (res.data.resultCode === RequestStatusCodes.success) {\r\n            dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n            dispatch(changeTaskEntityStatusAC({todolistId, taskId, status: \"succeeded\"}))\r\n            return params\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n            dispatch(changeTaskEntityStatusAC({todolistId, taskId, status: \"failed\"}))\r\n            return rejectWithValue(null)\r\n        }\r\n    } catch (e) {\r\n        handleServerAppError(e, dispatch)\r\n        return rejectWithValue(null)\r\n    }\r\n\r\n})\r\n\r\nexport const asyncActions = {fetchTasks, removeTask, addTask, updateTask}\r\n\r\nconst slice = createSlice({\r\n    name: \"tasks\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        changeTaskEntityStatusAC(state, action: PayloadAction<{ todolistId: string, taskId: string, status: RequestStatusType }>) {\r\n            const index = state[action.payload.todolistId].findIndex(tl => tl.id === action.payload.taskId)\r\n            state[action.payload.todolistId][index].entityStatus = action.payload.status\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(asyncTodolistsActions.addTodolist.fulfilled, (state, action) => {\r\n            state[action.payload.todolist.id] = []\r\n        });\r\n        builder.addCase(asyncTodolistsActions.removeTodolist.fulfilled, (state, action) => {\r\n            delete state[action.payload.todolistId]\r\n        });\r\n        builder.addCase(asyncTodolistsActions.fetchTodolists.fulfilled, (state, action) => {\r\n            action.payload.todolists.forEach(tl => {\r\n                state[tl.id] = []\r\n            });\r\n        })\r\n        builder.addCase(fetchTasks.fulfilled, (state, action) => {\r\n            state[action.payload.todolistId] = action.payload.tasks.map(task => ({...task, entityStatus: \"idle\"}))\r\n        });\r\n        builder.addCase(removeTask.fulfilled, (state, action) => {\r\n            const index = state[action.payload.todolistId]\r\n                .findIndex(tl => tl.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                state[action.payload.todolistId].splice(index, 1)\r\n            }\r\n        })\r\n        builder.addCase(addTask.fulfilled, (state, action) => {\r\n            state[action.payload.todoListId].unshift({...action.payload, entityStatus: \"idle\"})\r\n        })\r\n        builder.addCase(updateTask.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(tl => tl.id === action.payload.taskId)\r\n            tasks[index] = {...tasks[index], ...action.payload.domain}\r\n        })\r\n    }\r\n})\r\n\r\nexport const tasksReducer = slice.reducer\r\n\r\nexport const {\r\n    changeTaskEntityStatusAC,\r\n} = slice.actions\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\nexport type TaskDomainType = TaskType & {\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskDomainType>\r\n}\r\n","import {authAPI, FieldErrorType, LoginParamsType} from \"../../api/todolists-a-p-i\";\r\nimport { setAppStatusAC} from \"../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {AxiosError} from \"axios\";\r\n\r\nexport const loginTC = createAsyncThunk<\r\n    undefined, LoginParamsType,\r\n    { rejectValue: { errors: string[], fieldsErrors?: FieldErrorType[] } }\r\n    >(\"auth/login\",\r\n    async (params, thunkAPI) => {\r\n        thunkAPI.dispatch(setAppStatusAC({status: \"loading\"}))\r\n\r\n        try {\r\n            const res = await authAPI.login(params)\r\n            if (res.data.resultCode === 0) {\r\n                thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                return;\r\n            } else {\r\n                debugger\r\n                handleServerAppError(res.data, thunkAPI.dispatch);\r\n                return thunkAPI.rejectWithValue({errors: res.data.messages, fieldsErrors: res.data.fieldsErrors})\r\n            }\r\n        } catch (e) {\r\n            const error: AxiosError = e\r\n            handleServerNetworkError(e, thunkAPI.dispatch)\r\n            return thunkAPI.rejectWithValue({errors: [error.message], fieldsErrors: undefined})\r\n        }\r\n    })\r\n\r\n\r\nexport const logoutTC = createAsyncThunk(\"auth/logout\",\r\n    async (params, thunkAPI) => {\r\n        thunkAPI.dispatch(setAppStatusAC({status: \"loading\"}))\r\n        try {\r\n            const res = await authAPI.logout()\r\n            if (res.data.resultCode === 0) {\r\n                thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                return;\r\n            } else {\r\n                handleServerAppError(res.data, thunkAPI.dispatch);\r\n                return thunkAPI.rejectWithValue({})\r\n            }\r\n        } catch (e) {\r\n            handleServerNetworkError(e, thunkAPI.dispatch)\r\n            return thunkAPI.rejectWithValue({})\r\n        }\r\n    })\r\nexport const asyncActions = {loginTC, logoutTC}\r\n\r\nexport const slice = createSlice({\r\n    name: \"auth\",\r\n    initialState: {\r\n        isLoggedIn: false\r\n    },\r\n    reducers: {\r\n        setIsLoggedInAC(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isLoggedIn = action.payload.value;\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(loginTC.fulfilled, (state, action) => {\r\n            state.isLoggedIn = true;\r\n        })\r\n        builder.addCase(logoutTC.fulfilled, (state, action) => {\r\n            state.isLoggedIn = false;\r\n        })\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\nexport const {setIsLoggedInAC} = slice.actions\r\n//THUNKS\r\n","import {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {authAPI} from \"../api/todolists-a-p-i\";\r\nimport {setIsLoggedInAC} from \"../features/Auth/auth-reducer\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type AppStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    status: 'loading' as RequestStatusType,\r\n    error: null as string | null,\r\n    init: false\r\n}\r\n\r\nconst authMeTC = createAsyncThunk(\"app/initApp\", async (param, {dispatch}) => {\r\n    const res = await authAPI.me()\r\n    if (res.data.resultCode === 0) {\r\n        dispatch(setIsLoggedInAC({value: true}))\r\n    } else {\r\n\r\n    }\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n})\r\n\r\nexport const asyncActions = {\r\n    authMeTC\r\n}\r\n\r\n\r\nconst slice = createSlice({\r\n    name: \"app\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAppStatusAC(state, action: PayloadAction<{ status: RequestStatusType }>) {\r\n            state.status = action.payload.status\r\n        },\r\n        setAppErrorAC(state, action: PayloadAction<{ error: string | null }>) {\r\n            state.error = action.payload.error\r\n        },\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(authMeTC.fulfilled, (state, action)=> {\r\n            state.init = true\r\n        })\r\n    }\r\n})\r\n\r\n\r\nexport const appReducer = slice.reducer;\r\nexport const {setAppErrorAC, setAppStatusAC} = slice.actions;\r\n","import {RequestStatusCodes, todolistsAPI, TodolistType} from \"../../api/todolists-a-p-i\";\r\nimport {RequestStatusType, setAppStatusAC} from \"../../app/app-reducer\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {AxiosError} from \"axios\";\r\nimport { ThunkErrorType } from \"../../utils/redux-help-types\";\r\n\r\nconst fetchTodolists = createAsyncThunk(\"todolists/fetchTodolists\",\r\n    async (params, {dispatch, rejectWithValue}) => {\r\n        dispatch(setAppStatusAC({status: \"loading\"}))\r\n        const res = await todolistsAPI.getTodolists()\r\n        try {\r\n            dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n            return {todolists: res.data}\r\n        } catch (e) {\r\n            handleServerNetworkError(e, dispatch)\r\n            return rejectWithValue(null)\r\n        }\r\n    })\r\nconst removeTodolist = createAsyncThunk(\"todolists/removeTodolists\",\r\n    async (params: { todolistId: string }, {dispatch, rejectWithValue}) => {\r\n        dispatch(setAppStatusAC({status: \"loading\"}))\r\n        dispatch(changeTodolistEntityStatus({status: \"loading\", id: params.todolistId}))\r\n        const res = await todolistsAPI.deleteTodolist(params.todolistId)\r\n        try {\r\n            return {todolistId: params.todolistId}\r\n        } catch (e) {\r\n            handleServerNetworkError(e, dispatch)\r\n            return rejectWithValue(null)\r\n        }\r\n    })\r\nconst addTodolist = createAsyncThunk<{todolist: TodolistType }, { title: string },\r\n    ThunkErrorType\r\n    >(\"todolists/addTodolists\",\r\n    async (params, {dispatch, rejectWithValue}) => {\r\n        dispatch(setAppStatusAC({status: \"loading\"}))\r\n        const res = await todolistsAPI.createTodolist(params.title)\r\n        try {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n                return {todolist: res.data.data.item}\r\n            } else {\r\n                handleServerAppError(res.data, dispatch, false)\r\n                return rejectWithValue({errors: res.data.messages, fieldsErrors: res.data.fieldsErrors})\r\n            }\r\n        } catch (e) {\r\n            const error: AxiosError = e\r\n            handleServerAppError(e, dispatch, false)\r\n            return rejectWithValue({errors: [error.message], fieldsErrors: undefined})\r\n        }\r\n    })\r\nconst changeTodolistTitle = createAsyncThunk(\"todolists/changeTodolistTitle\",\r\n    async (params: { id: string, title: string }, {dispatch, rejectWithValue}) => {\r\n        dispatch(setAppStatusAC({status: \"loading\"}))\r\n        try {\r\n            const res = await todolistsAPI.updateTodolist(params.id, params.title)\r\n            if (res.data.resultCode === RequestStatusCodes.success) {\r\n                dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n                return {todolistId: params.id, newTitle: params.title}\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n                return rejectWithValue({errors: res.data.messages, fieldsErrors: res.data.fieldsErrors})\r\n            }\r\n        } catch (e) {\r\n            const error: AxiosError = e\r\n            handleServerAppError(e, dispatch, false)\r\n            return rejectWithValue({errors: [error.message], fieldsErrors: undefined})\r\n        }\r\n\r\n\r\n    })\r\n\r\nexport const asyncActions = {\r\n    fetchTodolists,\r\n    removeTodolist,\r\n    addTodolist,\r\n    changeTodolistTitle\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: \"todolists\",\r\n    initialState: [] as Array<TodolistDomainType>,\r\n    reducers: {\r\n        changeTodolistFilter(state, action: PayloadAction<{ todolistId: string, newFilter: FilterValuesType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.todolistId)\r\n            state[index].filter = action.payload.newFilter\r\n        },\r\n        changeTodolistEntityStatus(state, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].entityStatus = action.payload.status\r\n        },\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(fetchTodolists.fulfilled, (state, action) => {\r\n            return action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: \"idle\"}))\r\n        })\r\n        builder.addCase(removeTodolist.fulfilled, (state, action) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.todolistId)\r\n            if (index > -1) {\r\n                state.splice(index, 1)\r\n            }\r\n        })\r\n        builder.addCase(addTodolist.fulfilled, (state, action) => {\r\n            state.unshift({...action.payload.todolist, filter: 'all', entityStatus: \"idle\"})\r\n        })\r\n        builder.addCase(changeTodolistTitle.fulfilled, (state, action) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.todolistId)\r\n            state[index].title = action.payload.newTitle\r\n        })\r\n    }\r\n})\r\n\r\nexport const todolistsReducer = slice.reducer\r\nexport const {changeTodolistEntityStatus, changeTodolistFilter} = slice.actions\r\n//THUNKS\r\n\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {combineReducers} from 'redux';\r\nimport {appReducer} from \"./app-reducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\nimport { authReducer } from '../features/Auth/auth-reducer';\r\n\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunk)\r\n})\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\n","import React, { } from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport { AppRootStateType } from '../../app/store';\r\nimport { setAppErrorAC } from '../../app/app-reducer';\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\n\r\n\r\nexport function ErrorSnackbar() {\r\n    const dispatch = useDispatch()\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC({error: null}))\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n\r\n    )\r\n}\r\n","import React, {useState, ChangeEvent, KeyboardEvent} from \"react\";\r\nimport {TextField, IconButton} from \"@material-ui/core\";\r\nimport {AddCircle} from \"@material-ui/icons\";\r\nimport {RequestStatusType} from \"../../app/app-reducer\";\r\n\r\n\r\nexport type AddItemFormSubmitHelperType = {\r\n    setError: (error: string) => void,\r\n    setTaskText: (title: string) => void\r\n}\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (params: { title: string }, helper: AddItemFormSubmitHelperType) => void\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nexport const AddItemForm = React.memo(function (props: AddItemFormPropsType) {\r\n    let [newTaskText, setTaskText] = useState('');\r\n    let [error, setError] = useState<string | null>(null);\r\n\r\n    function onTaskNameChanged(e: ChangeEvent<HTMLInputElement>): void {\r\n        setTaskText(e.target.value);\r\n        setError(null);\r\n    }\r\n\r\n    const addItem = async () => {\r\n        if (newTaskText.trim()) {\r\n            props.addItem({title: newTaskText.trim()}, {setError, setTaskText});\r\n        } else {\r\n            setError('Title is required!');\r\n        }\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLDivElement>) => {\r\n        if (error !== null) setError(null)\r\n        if (e.key === \"Enter\") addItem()\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField onChange={onTaskNameChanged}\r\n                       value={newTaskText}\r\n                       onKeyPress={onKeyPressHandler}\r\n                       variant={\"outlined\"}\r\n                       size={\"small\"}\r\n                       error={!!error}\r\n                       helperText={error}\r\n                       label={\"Title\"}\r\n                       disabled={props.entityStatus === \"loading\"}\r\n            />\r\n            <IconButton color={\"primary\"}\r\n                        onClick={addItem}\r\n                        disabled={!newTaskText && props.entityStatus === \"loading\"}\r\n                        style={{marginLeft: \"5px\"}}\r\n            >\r\n                <AddCircle/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})\r\n","import React, {ChangeEvent, useState} from \"react\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport {RequestStatusType} from \"../../app/app-reducer\";\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newTitle: string) => void\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"editable span\")\r\n    let [editMode, setEditMode] = useState<boolean>(false)\r\n    let [title, setTitle] = useState<string>('')\r\n\r\n\r\n    function activateEditMode() {\r\n        if (!(props.entityStatus===\"loading\")) {\r\n            setEditMode(true)\r\n            setTitle(props.value)\r\n        }\r\n    }\r\n\r\n    function deactivateEditMode() {\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n    }\r\n\r\n    function changeTitleHandler(e: ChangeEvent<HTMLInputElement>) {\r\n        setTitle(e.target.value)\r\n    }\r\n\r\n\r\n    return editMode\r\n        ? <TextField value={title} variant={\"outlined\"} size={\"small\"} onChange={changeTitleHandler} onBlur={deactivateEditMode} autoFocus/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n})\r\n","import {useDispatch} from \"react-redux\";\r\nimport {ActionCreatorsMapObject, bindActionCreators} from \"redux\";\r\nimport {useMemo} from \"react\";\r\nimport { AppDispatchType } from \"./redux-help-types\";\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatchType>()\r\n\r\nexport function useActions<T extends ActionCreatorsMapObject<any>>(actions: T) {\r\n    const dispatch = useAppDispatch()\r\n\r\n    const boundActions = useMemo(() => {\r\n        return bindActionCreators(actions, dispatch)\r\n    }, [])\r\n\r\n    return boundActions\r\n}\r\n","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"../../../../components/EditableSpan/EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskDomainType} from \"../../tasks-reducer\";\r\nimport { TaskStatuses } from \"../../../../api/todolists-a-p-i\";\r\nimport {tasksActions} from \"../../index\";\r\nimport { useActions } from \"../../../../utils/redux-utils\";\r\n\r\ntype TaskPropsType = {\r\n    task: TaskDomainType\r\n    todolistId: string\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n\r\n    const {updateTask, removeTask} = useActions(tasksActions)\r\n\r\n    const onClickHandler = useCallback(() => removeTask({taskId: props.task.id,todolistId: props.todolistId}), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        updateTask({\r\n            taskId: props.task.id,\r\n            domain: {status: newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New},\r\n            todolistId: props.todolistId\r\n        })}, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        updateTask({\r\n            taskId: props.task.id,\r\n            domain: {title: newValue},\r\n            todolistId: props.todolistId\r\n        })}, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id}\r\n                className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}\r\n                style={{position: \"relative\"}}\r\n    >\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n            disabled={props.task.entityStatus === \"loading\"}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler} entityStatus={props.task.entityStatus}/>\r\n        <IconButton onClick={onClickHandler}\r\n                    size={\"small\"}\r\n                    disabled={props.task.entityStatus === \"loading\"}\r\n                    style={{position: \"absolute\", top: \"2px\", right: \"2px\"}}\r\n        >\r\n            <Delete fontSize={\"small\"}/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n\r\n","import { Task } from \"./Task/Task\"\r\nimport { EditableSpan } from \"../../../components/EditableSpan/EditableSpan\"\r\nimport { TaskStatuses } from \"../../../api/todolists-a-p-i\"\r\nimport {FilterValuesType, TodolistDomainType} from \"../todolists-reducer\"\r\nimport React, {useCallback, useEffect} from \"react\"\r\nimport {TaskDomainType} from \"../tasks-reducer\"\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {IconButton, Button, PropTypes, Paper} from \"@material-ui/core\";\r\nimport {AddItemForm, AddItemFormSubmitHelperType} from \"../../../components/AddItemForm/AddItemForm\";\r\nimport {tasksActions, todolistsActions} from \"../index\";\r\nimport {useActions, useAppDispatch} from \"../../../utils/redux-utils\";\r\n\r\n\r\ntype TodolistPropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskDomainType>\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: TodolistPropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const {\r\n        removeTodolist,\r\n        changeTodolistTitle,\r\n        changeTodolistFilter,\r\n    } = useActions(todolistsActions)\r\n\r\n    const {fetchTasks} = useActions(tasksActions)\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    useEffect(() => {\r\n        fetchTasks(props.todolist.id)\r\n    }, [])\r\n\r\n\r\n    const addTaskCallback = useCallback(async (params: {title: string}, helper: AddItemFormSubmitHelperType ) => {\r\n        let thunk = tasksActions.addTask({title: params.title,todolistId: props.todolist.id})\r\n        const resultAction = await dispatch(thunk)\r\n\r\n        if (tasksActions.addTask.rejected.match(resultAction)) {\r\n            if (resultAction.payload?.errors?.length) {\r\n                const error = resultAction.payload?.errors[0]\r\n                helper.setError(error)\r\n            } else {\r\n                helper.setError(\"Some error occured\")\r\n            }\r\n        } else {\r\n            helper.setTaskText(\"\")\r\n        }\r\n    }, [props.todolist.id])\r\n\r\n    const removeTodolistHandler = () => {\r\n        removeTodolist({todolistId: props.todolist.id})\r\n    }\r\n    const changeTodolistTitleHandler = useCallback((title: string) => {\r\n        changeTodolistTitle({id: props.todolist.id, title})\r\n    }, [props.todolist.id])\r\n\r\n    const onFilterButtonClickHandler = useCallback(\r\n        (filter: FilterValuesType) => changeTodolistFilter({\r\n            newFilter:\r\n            filter,\r\n            todolistId: props.todolist.id\r\n        }), [props.todolist.id])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    const renderFilterButton = (\r\n        buttonFilter: FilterValuesType,\r\n        color: PropTypes.Color,\r\n        text: string\r\n    ) => {\r\n        return <Button variant={props.todolist.filter === buttonFilter ? 'outlined' : 'text'}\r\n                       onClick={() => onFilterButtonClickHandler(buttonFilter)}\r\n                       color={color}>{text}\r\n        </Button>\r\n    }\r\n\r\n    return <Paper style={{padding: '10px', position: \"relative\"}}>\r\n            <IconButton onClick={removeTodolistHandler}\r\n                        size={\"small\"}\r\n                        disabled={props.todolist.entityStatus === \"loading\"}\r\n                        style={{position: \"absolute\", right: \"5px\", top: \"5px\"}}\r\n            >\r\n                <Delete fontSize={\"small\"}/>\r\n            </IconButton>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitleHandler} entityStatus={props.todolist.entityStatus}/>\r\n        </h3>\r\n        <AddItemForm addItem={addTaskCallback} entityStatus={props.todolist.entityStatus}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}/>)\r\n            }\r\n            { !tasksForTodolist.length && <div style={{padding: \"10px\", color: \"gray\"}}>No tasks</div>}\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            {renderFilterButton('all', 'default', \"All\")}\r\n            {renderFilterButton( 'active', 'primary', \"Active\")}\r\n            {renderFilterButton( 'completed', 'secondary', \"Completed\")}\r\n        </div>\r\n    </Paper>\r\n})\r\n","import {AppRootStateType} from \"../../app/store\";\r\n\r\nexport const selectIsLoggedIn = (state: AppRootStateType) => state.auth.isLoggedIn;\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useSelector} from 'react-redux'\r\nimport {Grid} from '@material-ui/core'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    TodolistDomainType,\r\n} from './todolists-reducer'\r\nimport {TasksStateType} from './tasks-reducer'\r\nimport {AddItemForm, AddItemFormSubmitHelperType} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {selectIsLoggedIn} from \"../Auth/selectors\";\r\nimport {todolistsActions} from \"./index\";\r\nimport {useActions, useAppDispatch} from \"../../utils/redux-utils\";\r\n\r\nexport const TodolistsList: React.FC = () => {\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector(selectIsLoggedIn)\r\n    const dispatch = useAppDispatch()\r\n\r\n    const {fetchTodolists} = useActions(todolistsActions)\r\n\r\n    const addTodolistCallback = useCallback(async (params: { title: string }, helper: AddItemFormSubmitHelperType) => {\r\n\r\n\r\n        let thunk = todolistsActions.addTodolist({title: params.title})\r\n        const resultAction = await dispatch(thunk)\r\n\r\n        if (todolistsActions.addTodolist.rejected.match(resultAction)) {\r\n            if (resultAction.payload?.errors?.length) {\r\n                const error = resultAction.payload?.errors[0]\r\n                helper.setError(error)\r\n            } else {\r\n                helper.setError(\"Some error occured\")\r\n            }\r\n        } else {\r\n            helper.setTaskText(\"\")\r\n        }\r\n\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (isLoggedIn) {\r\n            fetchTodolists()\r\n        }\r\n\r\n    }, [])\r\n\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm entityStatus={\"idle\"} addItem={addTodolistCallback}/>\r\n        </Grid>\r\n        <Grid container spacing={3} style={{flexWrap: \"nowrap\", overflowX: \"scroll\"}}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <div style={{width: \"300px\"}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                            />\r\n                        </div>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import {asyncActions as tasksAsyncActions} from \"./tasks-reducer\"\r\nimport {asyncActions as todolistAsyncActions} from \"./todolists-reducer\"\r\nimport {slice as todolistsSlice} from \"./todolists-reducer\"\r\nimport {slice as tasksSlice} from \"./todolists-reducer\"\r\nimport {TodolistsList} from \"./TodolistsList\"\r\n\r\nconst todolistsActions = {\r\n    ...todolistAsyncActions,\r\n    ...todolistsSlice.actions\r\n}\r\n\r\nconst tasksActions = {\r\n    ...tasksAsyncActions,\r\n}\r\n\r\nconst todolistsReducer = todolistsSlice.reducer\r\nconst tasksReducer = tasksSlice.reducer\r\n\r\nexport {\r\n    tasksActions,\r\n    todolistsActions,\r\n    TodolistsList,\r\n    todolistsReducer,\r\n    tasksReducer\r\n}\r\n","import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {FormikHelpers, useFormik} from \"formik\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {Redirect} from 'react-router-dom';\r\nimport {selectIsLoggedIn} from \"./selectors\";\r\nimport {authActions} from \"./index\";\r\nimport { loginTC } from './auth-reducer';\r\nimport { useAppDispatch } from '../../utils/redux-utils';\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\ntype FormValuesTypes = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useAppDispatch();\r\n    const isLoggedIn = useSelector(selectIsLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            rememberMe: false,\r\n            password: '',\r\n            email: '',\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 5) {\r\n                errors.password = \"Must be 5 symbols or more\"\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: async (values, formikHelpers: FormikHelpers<FormValuesTypes>) => {\r\n            const action = await dispatch(authActions.loginTC(values))\r\n            if (loginTC.rejected.match(action)) {\r\n                if (action.payload?.fieldsErrors?.length) {\r\n                    const error = action.payload?.fieldsErrors[0]\r\n                    formikHelpers.setFieldError(error.field, error.error)\r\n                } else {\r\n\r\n                }\r\n            }\r\n        },\r\n    });\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}>here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"email\")}\r\n                        />\r\n                        {formik.errors.email ? <div style={{color: \"red\"}}>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"password\")}\r\n                        />\r\n                        {formik.errors.password ? <div style={{color: \"red\"}}>{formik.errors.password}</div> : null}\r\n\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox {...formik.getFieldProps(\"rememberMe\")}\r\n                            />}\r\n                        />\r\n\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import * as authSelectors from \"./selectors\"\r\nimport {Login} from \"./Login\"\r\nimport {asyncActions, slice} from \"./auth-reducer\"\r\n\r\n\r\nconst authActions = {\r\n    ...asyncActions,\r\n    ...slice.actions\r\n}\r\n\r\nexport {\r\n    authActions,\r\n    authSelectors,\r\n    Login\r\n}\r\n","import {AppRootStateType} from \"./store\";\r\n\r\nexport const selectStatus = (state: AppRootStateType) => state.app.status\r\nexport const selectInitApp = (state: AppRootStateType) => state.app.init\r\n","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport {\r\n    AppBar,\r\n    IconButton,\r\n    Typography,\r\n    Button,\r\n    Toolbar,\r\n    Container,\r\n    LinearProgress,\r\n    CircularProgress\r\n} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {asyncActions} from './app-reducer';\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar';\r\nimport {TodolistsList} from '../features/TodolistsList';\r\nimport {Route, Switch} from 'react-router-dom';\r\nimport {Login} from \"../features/Auth\";\r\nimport {logoutTC} from \"../features/Auth/auth-reducer\";\r\nimport {selectInitApp, selectStatus} from './selectors';\r\nimport {authSelectors} from \"../features/Auth\";\r\n\r\n\r\nfunction App() {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const status = useSelector(selectStatus)\r\n    const isLoggedIn = useSelector(authSelectors.selectIsLoggedIn)\r\n    const initApp = useSelector(selectInitApp)\r\n\r\n    const logoutHandler = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(asyncActions.authMeTC())\r\n    })\r\n\r\n    if (!initApp) {\r\n        return <div style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Logout</Button>}\r\n                </Toolbar>\r\n            </AppBar>\r\n            {status === \"loading\" && <LinearProgress color=\"secondary\"/>}\r\n            <Container fixed>\r\n\r\n                <Switch>\r\n                    <Route exact path={\"/\"} component={TodolistsList}/>\r\n                    <Route path={\"/login\"} component={Login}/>\r\n                </Switch>\r\n\r\n            </Container>\r\n            <ErrorSnackbar/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./app/store\";\r\nimport App from './app/App';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n    </BrowserRouter>,\r\n\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}